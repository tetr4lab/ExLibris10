@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedLocalStorage Storage
@inject NavigationManager Navi

@inherits LayoutComponentBase

<PageTitle>ExLibris</PageTitle>

<div class="page">
    <AuthorizeView Policy="Users">
        <Authorized>
            <nav>
                <MudHidden Breakpoint="Breakpoint.Xs" Invert="true">
                    <MudFab Class="fixed ma-2 z-100" Style="right: 0px;" Color="Color.Transparent" Ripple="false" StartIcon="@Icons.Material.Filled.Menu" Size="Size.Small" OnClick="@(() => _drawerOpen = true)" />
                    <MudDrawer Class="fixed" @bind-Open="@_drawerOpen" Anchor="Anchor.Top" Elevation="1" Variant="@DrawerVariant.Temporary">
                        <MudNavMenu Dense Color="Color.Dark" Class="px-4 my-2">
                            <CascadingValue Value="@_filterText" Name="Filter">
                                <NavBar OnClickSearchButton="SetFilterText" IsDarkMode="_isDarkMode" OnClickChangeModeButton="ChangeModeAsync" />
                            </CascadingValue>
                        </MudNavMenu>
                    </MudDrawer>
                </MudHidden>
                <MudHidden Breakpoint="Breakpoint.Xs">
                    <MudAppBar Color="Color.Transparent" Dense Fixed="true">
                        <MudGrid Class="align-center flex-nowrap" Spacing="0">
                            <CascadingValue Value="@_filterText" Name="Filter">
                                <NavBar OnClickSearchButton="SetFilterText" IsDarkMode="_isDarkMode" OnClickChangeModeButton="ChangeModeAsync" />
                            </CascadingValue>
                        </MudGrid>
                    </MudAppBar>
                </MudHidden>
            </nav>
            <main>
                <MudHidden Breakpoint="Breakpoint.Xs">
                    <MudAppBar Color="Color.Transparent" Style="z-index:0;" Elevation="0" Dense Fixed="false">
                        @*hidden spacer*@
                    </MudAppBar>
                </MudHidden>
                <MudStack Row Class="px-4" Justify="Justify.SpaceBetween">
                    <MudText Typo="Typo.h5">@_sectionTitle</MudText>
                    <MudText Typo="Typo.h5"><SessionCounter /></MudText>
                </MudStack>
                <article class="content px-4">
                    <CascadingValue Value="@_filterText" Name="Filter">
                        <CascadingValue Value="@(EventCallback.Factory.Create<string> (this, SetFilterText))" Name="SetFilter">
                            <CascadingValue Value="@(EventCallback.Factory.Create<string> (this, SetSectionTitle))" Name="Section">
                                <CascadingValue Value="@_rowsPerPage" Name="RowsPerPage">
                                    <CascadingValue Value="@(EventCallback.Factory.Create<int> (this, SetRowsPerPage))" Name="SetRowsPerPage">
                                        @Body
                                    </CascadingValue>
                                </CascadingValue>
                            </CascadingValue>
                        </CascadingValue>
                    </CascadingValue>
                </article>
            </main>
        </Authorized>
        <NotAuthorized>
            <main>
                <article class="content px-4">
                    @Body
                </article>
            </main>
        </NotAuthorized>
    </AuthorizeView>
</div>
<MudThemeProvider @ref="@_mudThemeProvider" @bind-IsDarkMode="@_isDarkMode" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

@code {
    /// <summary>テーマ ストレージキー</summary>
    protected const string DarkModeStorageKey = "IsDarkTheme";

    /// <summary>ページ行数 ストレージキー</summary>
    protected const string RowsPerPageStorageKey = "RowsPerPage";

    /// <summary>デフォルトページ行数</summary>
    protected const int RowsPerPageDefault = 20;

    /// <summary>テーマプロバイダへの参照</summary>
    protected MudThemeProvider _mudThemeProvider = default!;

    /// <summary>ダークモード</summary>
    protected bool _isDarkMode;

    /// <summary>ページ行数</summary>
    protected int _rowsPerPage;

    /// <summary>モード切替ボタンが押された</summary>
    protected async Task ChangeModeAsync () {
        _isDarkMode = !_isDarkMode;
        await Storage.SetValueAsync (DarkModeStorageKey, _isDarkMode);
    }

    /// <summary>ページ行数が変更された</summary>
    protected async Task SetRowsPerPage (int rowsPerPage) {
        if (_rowsPerPage != rowsPerPage) {
            _rowsPerPage = rowsPerPage;
            await Storage.SetValueAsync (RowsPerPageStorageKey, _rowsPerPage);
        }
    }

    /// <summary>遅延初期化</summary>
    protected override async Task OnAfterRenderAsync (bool firstRender) {
        await base.OnAfterRenderAsync (firstRender);
        if (firstRender) {
            try {
                // テーマ
                var isDarkMode = await Storage.GetValueAsync<bool> (DarkModeStorageKey);
                _isDarkMode = isDarkMode.Success ? isDarkMode.Value : await _mudThemeProvider.GetSystemDarkModeAsync ();
                // ページ行数
                var rowsPerPage = await Storage.GetValueAsync<int> (RowsPerPageStorageKey);
                _rowsPerPage = rowsPerPage.Success ? rowsPerPage.Value : RowsPerPageDefault;
            }
            catch (System.Security.Cryptography.CryptographicException ex) {
                System.Diagnostics.Debug.WriteLine ($"CryptographicException: {ex.Message}\n{ex.StackTrace}");
            }
            await Storage.SetValueAsync (DarkModeStorageKey, _isDarkMode);
            await Storage.SetValueAsync (RowsPerPageStorageKey, _rowsPerPage);
            StateHasChanged ();
        }
    }

    /// <summary>ドロワーの状態</summary>
    protected bool _drawerOpen = false;
    /// <summary>セクションタイトル</summary>
    protected string _sectionTitle = string.Empty;
    /// <summary>検索文字列 (カスケーディングパラメータ)</summary>
    protected string _filterText = string.Empty;

    /// <summary>セクションタイトルが変更された</summary>
    protected void SetSectionTitle (string title) {
        _sectionTitle = title;
    }

    /// <summary>検索ボタンが押された</summary>
    protected void SetFilterText (string text) {
        _filterText = text;
        _drawerOpen = false;
    }
}
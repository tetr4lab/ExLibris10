@page "/"

@inject IDbConnection connection

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>
<p>@datetime</p>
<p>Welcome to your new app.</p>

@if (Authors != null) {
    <p>@Authors.Count</p>
    @foreach (var author in Authors) {
        <table>
            <tr>
                <td>@author.Id</td>
                <td>@author.Name</td>
                <td>@author.AdditionalName</td>
                <td>@author.Description</td>
            </tr>
        </table>
    }
}


@code {

    protected Database db { get; set; } = default!;

    public class Author {
        public int Id { get; set; }
        public int Version { get; set; }
        public string Name { get; set; } = "";
        public string AdditionalName { get; set; } = "";
        public string? Description { get; set; } = null;
        public List<int> BooksId { get; set; } = new ();
    }

    protected List<Author>? Authors { get; set; } = default;

    protected DateTime datetime { get; set; }

    protected override async Task OnInitializedAsync () {
        await base.OnInitializedAsync ();
        connection.Open ();
        // MySQL Connector/NET
        // var cmd = connection.CreateCommand ();
        // cmd.CommandText = "select now()";
        // cmd.Connection = connection;
        // using (var reader = cmd.ExecuteReader ()) {
        //     reader.Read ();
        //     datetime = reader.GetDateTime (0);
        // }
        db = new Database (connection);
        datetime = await db.ExecuteScalarAsync<DateTime> ("select now()");
        Authors = await db.FetchAsync<Author> ("select * from Authors");
        //Authors = await db.FetchAsync<Author> ("select Authors.*, AuthorBook.BooksId from Authors left join AuthorBook on Authors.Id=AuthorBook.AuthorsId group by Authors.Id");
        connection.Close ();
        StateHasChanged ();
    }

}
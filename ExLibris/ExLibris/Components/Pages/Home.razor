@page "/"

@inject ExLibrisDataSet DataSet

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>
<p>@(StartTime.ToLongTimeString ()) ~ @(EndTime.ToLongTimeString ()) @(EndTime - StartTime)</p>
<p>Welcome to your new app.</p>

@if (DataSet.Initialized) {
    <div class="card hstack p-2"><div>書籍</div><div class="ms-auto">@($"{DataSet.Books.Count:#,#}")冊</div></div>
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Title</th>
                <th>Authors</th>
                <th>PublishDate</th>
                <th>Publisher</th>
                <th>Series</th>
                <th>Price</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var book in DataSet.Books) {
                <tr>
                    <td class="text-end">@book.Id</td>
                    <td>@book.Title</td>
                    <td>@(string.Join (", ", book.Authors.ConvertAll (i => i.Name)))</td>
                    <td>@(book.PublishDate?.ToShortDateString ())</td>
                    <td>@book.Publisher</td>
                    <td>@book.Series</td>
                    <td class="text-end">¥@($"{book.Price:#,#}")</td>
                    <td>@book.Description</td>
                </tr>
            }
        </tbody>
    </table>
    <div class="card hstack p-2"><div>著者</div><div class="ms-auto">@($"{DataSet.Authors.Count:#,#}")人</div></div>
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>-</th>
                <th>Books</th>
                <th>Descripthion</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var author in DataSet.Authors) {
                <tr>
                    <td class="text-end">@author.Id</td>
                    <td>@author.Name</td>
                    <td>@author.AdditionalName</td>
                    <td>@(string.Join (", ", author.Books.ConvertAll (i => i.Title)))</td>
                    <td>@author.Description</td>
                </tr>
            }
        </tbody>
    </table>
} else {
    <p>loading...</p>
}

@code {
    [TableName (""), PrimaryKey ("Id"), ExplicitColumns]
    public class ExLibrisBaseModel<T1, T2>
        where T1 : ExLibrisBaseModel<T1, T2>, new()
        where T2 : ExLibrisBaseModel<T2, T1>, new() {
        [Column] public int Id { get; set; }
        [Column] public int Version { get; set; }
        [Column] public string? _relatedIds { get; set; }
        public string? RelatedIds {
            get => _relatedIds;
            set {
                _relatedIds = value;
                _relatedItems = default;
            }
        }
        public List<T2> RelatedItems {
            get => (_relatedItems ??= (RelatedIds ?? "").Split (',').ToList ().ConvertAll (id => DataSet.GetAll<T2> ().Find (item => item.Id == int.Parse (id)) ?? new ()));
            set {
                _relatedIds = string.Join (",", value.ConvertAll (item => item.Id));
                _relatedIds = default;
            }
        }
        public List<T2>? _relatedItems { get; set; }
        public ExLibrisDataSet DataSet { get; set; } = default!;
    }

    [TableName ("Authos"), PrimaryKey ("Id"), ExplicitColumns]
    public class Author : ExLibrisBaseModel<Author, Book> {
        [Column] public string Name { get; set; } = "";
        [Column] public string AdditionalName { get; set; } = "";
        [Column] public string? Description { get; set; }
        public List<Book> Books => RelatedItems;
    }

    [TableName ("Books"), PrimaryKey ("Id"), ExplicitColumns]
    public class Book : ExLibrisBaseModel<Book, Author> {
        [Column] public string Title { get; set; } = "";
        [Column] public string? Description { get; set; }
        [Column] public DateTime? PublishDate { get; set; }
        [Column] public string Publisher { get; set; } = "";
        [Column] public string Series { get; set; } = "";
        [Column] public decimal Price { get; set; }
        public List<Author> Authors => RelatedItems;
    }
    public sealed class ExLibrisDataSet {
        [Inject] private Database database { get; set; }
        public ExLibrisDataSet (Database database) {
            this.database = database;
        }
        public async Task Initialize () {
            await LoadAsync ();
        }
        public bool Initialized { get; private set; }
        public async Task LoadAsync () {
            if (isLoading) { return; }
            isLoading = true;
            Initialized = false;
            Books = await database.FetchAsync<Book> (
                @"select Books.*, Group_concat(AuthorsId) as _relatedIds
                from Books
                left join AuthorBook on Books.Id = AuthorBook.BooksId
                group by Books.Id;");
            Authors = await database.FetchAsync<Author> (
                @"select Authors.*, Group_concat(BooksId) as _relatedIds
                from Authors
                left join AuthorBook on Authors.Id = AuthorBook.AuthorsId
                group by Authors.Id;");
            isLoading = false;
            Initialized = true;
        }
        private bool isLoading;
        public List<T> GetAll<T> () where T : class => (
                typeof (T) == typeof (Author) ? Authors as List<T> :
                typeof (T) == typeof (Book) ? Books as List<T> : null
            ) ?? new ();
        public List<Author> Authors {
            get => _authors;
            set => (_authors = value).ForEach (author => author.DataSet = this);
        }
        private List<Author> _authors = new ();
        public List<Book> Books {
            get => _books;
            set => (_books = value).ForEach (book => book.DataSet = this);
        }
        private List<Book> _books = new ();
    }

    protected DateTime StartTime { get; set; }
    protected DateTime EndTime { get; set; }

    protected override async Task OnInitializedAsync () {
        await base.OnInitializedAsync ();
        StartTime = DateTime.Now;
        _ = DataSet.Initialize ();
    }

    protected override async Task OnAfterRenderAsync (bool firstRender) {
        await base.OnAfterRenderAsync (firstRender);
        if (firstRender) {
            while (!DataSet.Initialized) {
                await Task.Delay (1000 / 60);
            }
            EndTime = DateTime.Now;
            StateHasChanged ();
        }
    }

}

@page "/"

@inject ExLibrisDataSet DataSet

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>
<p>Welcome to your new app.</p>

@if (DataSet.IsInitialized) {
    <div>@(StartTime.ToLongTimeString ()) ~ @(EndTime.ToLongTimeString ()) @(EndTime - StartTime) ±@(ExLibrisDataSet.WaitInterval)msec</div>
    <div class="card hstack p-2"><div>書籍</div><div class="ms-auto">@($"{DataSet.Books.Count:#,#}")冊</div></div>
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Title</th>
                <th>Authors</th>
                <th>PublishDate</th>
                <th>Publisher</th>
                <th>Series</th>
                <th>Price</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in DataSet.Books) {
                <tr>
                    <td class="text-end">@item.Id</td>
                    <td>@item.Title</td>
                    <td>@(string.Join (", ", item.RelatedItems.ConvertAll (i => i.Name)))</td>
                    <td>@(item.PublishDate?.ToShortDateString ())</td>
                    <td>@item.Publisher</td>
                    <td>@item.Series</td>
                    <td class="text-end">¥@($"{item.Price:#,#}")</td>
                    <td>@item.Description</td>
                </tr>
            }
        </tbody>
    </table>
    <div class="card hstack p-2"><div>著者</div><div class="ms-auto">@($"{DataSet.Authors.Count:#,#}")人</div></div>
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>-</th>
                <th>Books</th>
                <th>Descripthion</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in DataSet.Authors) {
                <tr>
                    <td class="text-end">@item.Id</td>
                    <td>@item.Name</td>
                    <td>@item.AdditionalName</td>
                    <td>@(string.Join (", ", item.RelatedItems.ConvertAll (i => i.Title)))</td>
                    <td>@item.Description</td>
                </tr>
            }
        </tbody>
    </table>
} else {
    <p>loading...</p>
}

@code {

    protected DateTime StartTime { get; set; }
    protected DateTime EndTime { get; set; }

    protected override async Task OnInitializedAsync () {
        await base.OnInitializedAsync ();
        StartTime = DateTime.Now;
        // 初期化を開始
        _ = DataSet.InitializeAsync ();
    }

    protected override async Task OnAfterRenderAsync (bool firstRender) {
        await base.OnAfterRenderAsync (firstRender);
        if (firstRender) {
            // 初期化の完了を待つ
            await DataSet.InitializeAsync ();
            EndTime = DateTime.Now;
            StateHasChanged ();

            var book = await DataSet.GetItemByNameAsync<Book, Author> (new Book { Title = "0000", PublishDate = new DateTime (2024, 6, 3), });
            var author = await DataSet.GetItemByIdAsync<Author, Book> (new Author { Id = 2445, });
            System.Diagnostics.Debug.WriteLine ($"{book}\n{author}");
            var result = await DeleteIfExistByName (new Book { Title = "1111", _relatedIds = "2445,2446,2447", PublishDate = new DateTime(2024, 6, 5), });
            System.Diagnostics.Debug.WriteLine ($"Delete 1111 {result}");
            result = await DeleteIfExistByName (new Book { Title = "2222", PublishDate = new DateTime (2024, 6, 5), });
            System.Diagnostics.Debug.WriteLine ($"Delete 2222 {result}");
            var book2 = await DataSet.AddAsync<Book, Author> (new Book { Title = "1111", _relatedIds = "2445,2446,2447", PublishDate = new DateTime (2024, 6, 5), });
            System.Diagnostics.Debug.WriteLine ($"Insert 1111 {book2}");
            var book3 = await DataSet.AddAsync<Book, Author> (new Book { Title = "2222", PublishDate = new DateTime (2024, 6, 5), });
            System.Diagnostics.Debug.WriteLine ($"Insert 2222 {book3}");
            if (book3.IsSuccess && book3.Value != null && book2.IsSuccess && book2.Value != null) {
                result = await DataSet.RemoveRangeAsync<Book, Author> (new List<Book> { book3.Value, book2.Value, });
                System.Diagnostics.Debug.WriteLine ($"Delete [2] {result}");
                result = await DataSet.AddRangeAsync<Book, Author> ([book2.Value, book3.Value,]);
                System.Diagnostics.Debug.WriteLine ($"Insert [2] {result}");
            }
            await DataSet.LoadAsync ();
            StateHasChanged ();
        }

        async Task<Result<int>> DeleteIfExistByName (Book item) {
            var exist = await DataSet.GetItemByNameAsync<Book, Author> (item);
            if (exist.IsSuccess && exist.Value != null) {
                return await DataSet.RemoveAsync<Book, Author> (exist.Value);
            }
            return new (exist.Status, 0);
        }
    }

}

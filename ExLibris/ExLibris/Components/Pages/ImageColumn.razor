@typeparam TItem1 where TItem1 : ExLibrisBaseModel<TItem1, TItem2>, IExLibrisModel, new()
@typeparam TItem2 where TItem2 : ExLibrisBaseModel<TItem2, TItem1>, IExLibrisModel, new()
@inject ISnackbar Snackbar

@if (Item.Image is not null || OnEdit) {
    <td rowspan="@RowSpan" class="pa-0" style="border-right:1px solid #ddd;white-space:nowrap;">
        @if (!OnEdit && Item.Image is not null) {
            <MudImage Width="Width" Src="@($"data:image/jpeg;base64,{Convert.ToBase64String (Item.Image)}")" />
        }
        @if (OnEdit) {
            <MudStack Row Spacing="1" Class="mx-1 mb-1">
                <MudFileUpload T="IBrowserFile" Accept=".jpg, .jpeg" FilesChanged="UploadFileAsync">
                    <ActivatorContent>
                        <MudButton Color="Color.Tertiary" Disabled="@(isUploading)" Variant="Variant.Outlined" Size="Size.Small" StartIcon="@Icons.Material.Filled.CloudUpload">
                            @if (Item.Image is null) {
                                @("Upload JPEG Image")
                            } else {
                                <MudImage Width="Width - 80" Src="@($"data:image/jpeg;base64,{Convert.ToBase64String (Item.Image)}")" />
                            }
                        </MudButton>
                    </ActivatorContent>
                </MudFileUpload>
                @if (Item.Image is not null) {
                    <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.DeleteForever" OnClick="DeleteFile" />
                }
            </MudStack>
        }
    </td>
}

@code {

    /// <summary>対象項目</summary>
    [Parameter] public TItem1 Item { get; set; } = null!;

    /// <summary>編集モード</summary>
    [Parameter] public bool OnEdit { get; set; }

    /// <summary>行数</summary>
    [Parameter] public int RowSpan { get; set; }

    /// <summary>幅</summary>
    [Parameter] public int Width { get; set; }

    /// <summary>更新を親に伝える</summary>
    [Parameter] public EventCallback OnStateHasChanged { get; set; }

    /// <summary>画像サイズ制限</summary>
    protected const int MAX_ALLOWED_IMAGE_SIZE = 1024 * 1024 * 10;

    /// <summary>アップロード中</summary>
    protected bool isUploading = false;

    /// <summary>画像のアップロード</summary>
    protected async void UploadFileAsync (IBrowserFile file) {
        if (isUploading || file == null) { return; }
        isUploading = true;
        try {
            using (var fs = file.OpenReadStream (MAX_ALLOWED_IMAGE_SIZE))
            using (var ms = new MemoryStream ()) {
                await fs.CopyToAsync (ms);
                Item.Image = ms.ToArray ();
            }
        }
        catch (System.IO.IOException ex) {
            if (ex.Message.Contains ("exceeds the maximum of")) {
                Snackbar.Add ($"ファイルサイズが大きすぎます。(Max {MAX_ALLOWED_IMAGE_SIZE:#,0}byte)");
            } else {
                throw;
            }
        }
        isUploading = false;
        OnChanged ();
    }

    /// <summary>画像の抹消</summary>
    protected void DeleteFile () {
        Item.Image = null;
        OnChanged ();
    }

    /// <summary>更新があった</summary>
    protected void OnChanged () {
        if (OnStateHasChanged.HasDelegate) {
            OnStateHasChanged.InvokeAsync ();
        }
    }

}
